AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  cafe-balu-back
  Sample SAM Template for cafe-balu-back


Globals:
  Function:
    Timeout: 25
    MemorySize: 128

Resources:
  # User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: user-pool-cafe-balu
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true

  # Roles del sistema
  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: admin
      UserPoolId: !Ref CognitoUserPool
      Description: "Usuario que tiene los permisos de administrador"
      Precedence: 1

  SalesGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: sales
      UserPoolId: !Ref CognitoUserPool
      Description: "Usuarios que pueden gestionar ventas"
      Precedence: 2

  # Cliente de aplicaci√≥n
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: cognito-client-cafe_balu
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - openid
        - email
        - profile
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      CallbackURLs:
        - !Sub "https://${ApiBaluchis}.execute-api.${AWS::Region}.amazonaws.com/Prod/callback"
      LogoutURLs:
        - !Sub "https://${ApiBaluchis}.execute-api.${AWS::Region}.amazonaws.com/Prod/logout"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: AccessGetSecretsManager
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "*"
        - PolicyName: PolicyForCognito_AdminInitiateAuth
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:RespondToAuthChallenge
                  - cognito-idp:ChangePassword
                Resource: "*"
        - PolicyName: PolicyForS3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: PublicReadGetObject
                Effect: Allow
                Action: s3:GetObject
                Resource: !Sub arn:aws:s3:::${S3Bucket}/*
              - Sid: PublicReadPutObject
                Effect: Allow
                Action: s3:PutObject
                Resource: !Sub arn:aws:s3:::${S3Bucket}/*
              - Sid: PublicReadListBucket
                Effect: Allow
                Action: s3:ListBucket
                Resource: !Sub arn:aws:s3:::${S3Bucket}
        - PolicyName: PolicyForCognito
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminListGroupsForUser
                Resource: "*"

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: balu-images-cafe
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - HEAD
            AllowedHeaders:
              - "*"
            ExposedHeaders:
              - "ETag"

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::balu-images-cafe/*
          - Sid: PublicReadPutObject
            Effect: Allow
            Principal: "*"
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::balu-images-cafe/*
          - Sid: PublicReadListBucket
            Effect: Allow
            Principal: "*"
            Action: s3:ListBucket
            Resource: !Sub arn:aws:s3:::balu-images-cafe

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: cafe_balu
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: MySQL
      MasterUsername: !Sub "{{resolve:secretsmanager:secretsForBalu:SecretString:username}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:secretsForBalu:SecretString:password}}"
      VPCSecurityGroups:
        - !GetAtt DBSecurityGroup.GroupId
      PubliclyAccessible: true
      MultiAZ: false
      AvailabilityZone: us-east-2a

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow access to RDS"
      VpcId: "vpc-0892c04cc6d3da369"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0

  ApiBaluchis:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: ApiCafeBalu
      Cors:
        AllowMethods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            IdentitySource: method.request.header.Authorization
  
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: login
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref ApiBaluchis
            Path: /login
            Method: post
  
  NewPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: newPassword
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        NewPassword:
          Type: Api
          Properties:
            RestApiId: !Ref ApiBaluchis
            Path: /new-password
            Method: patch

  SaveSaleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: save_sale/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        SaveSale:
          Type: Api
          Properties:
            RestApiId: !Ref ApiBaluchis
            Path: /save_sale
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
  
  HistorySalesPerDayFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: view_sales_history_per_day
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        HistorySalesPerDay:
          Type: Api
          Properties:
            RestApiId: !Ref ApiBaluchis
            Path: /history_per_day
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  CancelSaleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cancel_sales/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        CancelSale:
          Type: Api
          Properties:
            RestApiId: !Ref ApiBaluchis
            Path: /cancel_sale/{id}
            Method: patch
            Auth:
              Authorizer: CognitoAuthorizer

Outputs:
  LambdaExecutionRoleArn:
    Description: "Lambda Execution Role ARN"
    Value: !GetAtt LambdaExecutionRole.Arn

  LoginApi:
    Description: "Login API"
    Value: !Sub "https://${ApiBaluchis}.execute-api.${AWS::Region}.amazonaws.com/Prod/login"
  LoginFunctionArn:
    Description: "Login Lambda Function ARN"
    Value: !GetAtt LoginFunction.Arn
  
  NewPasswordApi:
    Description: "New password API"
    Value: !Sub "https://${ApiBaluchis}.execute-api.${AWS::Region}.amazonaws.com/Prod/new-password"
  NewPasswordArn:
    Description: "NewPassword Lambda Function ARN"
    Value: !GetAtt NewPasswordFunction.Arn
  
  SaveSaleApi:
    Description: "Save sale API"
    Value: !Sub "https://${ApiBaluchis}.execute-api.${AWS::Region}.amazonaws.com/Prod/save_sale"
  SaveSaleFunctionArn:
    Description: "SaveSale Lambda Function ARN"
    Value: !GetAtt SaveSaleFunction.Arn
  
  CancelSaleApi:
    Description: "Cancel sale API"
    Value: !Sub "https://${ApiBaluchis}.execute-api.${AWS::Region}.amazonaws.com/Prod/cancel_sale/{id}"

  HistorySalesPerDayApi:
    Description: "View of sales history per day API"
    Value: !Sub "https://${ApiBaluchis}.execute-api.${AWS::Region}.amazonaws.com/Prod/history_per_day"
  HistorySalesPerDayFunctionArn:
    Description: "HistorySalesPerDay Lambda Function ARN"
    Value: !GetAtt HistorySalesPerDayFunction.Arn